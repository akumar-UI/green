{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","email","setEmail","rememberDevice","setRememberDevice","className","src","logo","alt","action","onSubmit","e","console","log","type","value","onChange","target","id","checked","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,kC,4JCwD5BC,MApDf,WAAe,MAIaC,mBAAS,IAJtB,mBAINC,EAJM,KAICC,EAJD,OAK+BF,qBAL/B,mBAKNG,EALM,KAKUC,EALV,KAeb,OACE,yBAAKC,UAAU,OAEb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,uBACb,yBAAKC,IAAKC,IAAMC,IAAI,MAGtB,yBAAKH,UAAU,wBACb,oDACA,2DAGF,0BAAMI,OAAO,GAAGJ,UAAU,sBAAsBK,SAnBnC,SAAAC,GAEjBC,QAAQC,IAAIZ,GACZW,QAAQC,IAAIV,KAiBN,2BAAOE,UAAU,mCAAjB,iBACA,2BAAOS,KAAK,QAAQT,UAAU,kCAC5BU,MAAOd,EACPe,SAAU,SAAAL,GAAC,OAAIT,EAASS,EAAEM,OAAOF,UAGnC,yBAAKV,UAAU,8BACb,2BAAOS,KAAK,WAAWI,GAAG,QAAQb,UAAU,kCAC1CU,MAAOZ,EACPa,SAAU,SAAAL,GAAC,OAAIP,EAAkBO,EAAEM,OAAOE,YAE5C,2BAAOC,QAAQ,QAAQf,UAAU,mCAAjC,yBAGF,4BAAQA,UAAU,4BAAlB,eCnCUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.603d88c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9da97edd.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\n\nfunction App() {\n\n  // Form states\n\n  const [email, setEmail] = useState(\"\")\n  const [rememberDevice, setRememberDevice] = useState()\n\n  // Form Submission\n\n  const handleForm = e => {\n    // e.preventDefault()\n    console.log(email)\n    console.log(rememberDevice)\n  }\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"App__loginBox\">\n        <div className=\"App__loginBox__logo\">\n          <img src={logo} alt=\"\" />\n        </div>\n\n        <div className=\"App__loginBox__title\">\n          <h1>Example login screen</h1>\n          <p>Getting started with Green.</p>\n        </div>\n\n        <form action=\"\" className=\"App__loginBox__form\" onSubmit={handleForm}>\n          <label className=\"App__loginBox__form__lableEmail\">Email Address</label>\n          <input type=\"email\" className=\"App__loginBox__form__inputEmail\"\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <div className=\"App__loginBox__form__check\">\n            <input type=\"checkbox\" id=\"check\" className=\"App__loginBox__form__inputCheck\"\n              value={rememberDevice}\n              onChange={e => setRememberDevice(e.target.checked)}\n            />\n            <label htmlFor=\"check\" className=\"App__loginBox__form__labelCheck\">Remember this device</label>\n          </div>\n\n          <button className=\"App__loginBox__form__btn\">Sign In</button>\n        </form>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}